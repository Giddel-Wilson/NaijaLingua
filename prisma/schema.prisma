generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String        @unique
  passwordHash String
  role         Role          @default(STUDENT)
  bio          String?
  profileImage String?
  suspended    Boolean       @default(false)
  banned       Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  certificates Certificate[]
  courses      Course[]
  enrollments  Enrollment[]

  @@map("users")
}

model Course {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  language     Language
  level        Level
  imageUrl     String?
  price        Float         @default(0)
  currency     String        @default("USD")
  category     String?
  tags         String        @default("")
  isPublished  Boolean       @default(false)
  isApproved   Boolean       @default(false)
  createdById  String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  certificates Certificate[]
  createdBy    User          @relation(fields: [createdById], references: [id])
  enrollments  Enrollment[]
  lessons      Lesson[]

  @@map("courses")
}

model Lesson {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  courseId      String           @db.ObjectId
  title         String
  description   String?
  contentHtml   String?
  videoUrl      String?
  audioUrl      String?
  imageUrl      String?
  duration      Int?
  order         Int
  isPublished   Boolean          @default(false)
  contentSource String?
  vocabulary    Json?
  culturalNotes String?
  audioData     Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  progress      LessonProgress[]
  course        Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizzes       Quiz[]

  @@map("lessons")
}

model LessonProgress {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  lessonId    String    @db.ObjectId
  completed   Boolean   @default(false)
  timeSpent   Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Quiz {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  lessonId      String        @db.ObjectId
  type          QuizType
  question      String
  options       Json
  correctAnswer String
  explanation   String?
  points        Int           @default(10)
  order         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  attempts      QuizAttempt[]
  lesson        Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model QuizAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  quizId      String   @db.ObjectId
  answer      String
  isCorrect   Boolean
  score       Int      @default(0)
  attemptedAt DateTime @default(now())
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Enrollment {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  courseId         String    @db.ObjectId
  progress         Float     @default(0)
  score            Float?
  totalScore       Float?    @default(0)
  lessonsCompleted Int       @default(0)
  quizzesCompleted Int       @default(0)
  isCompleted      Boolean   @default(false)
  completedAt      DateTime?
  startedAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  course           Course    @relation(fields: [courseId], references: [id])
  user             User      @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Certificate {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  courseId   String   @db.ObjectId
  score      Float
  dateIssued DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("certificates")
}

model Vocabulary {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  language           Language
  word               String
  translation        String
  pronunciation      String?
  audioUrl           String?
  example            String?
  exampleTranslation String?
  category           String?
  source             String
  sourceData         Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([language, word])
  @@map("vocabulary")
}

model CulturalContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  language  Language
  topic     String
  title     String
  content   String
  imageUrl  String?
  videoUrl  String?
  source    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cultural_content")
}

enum Role {
  STUDENT
  INSTRUCTOR
  TUTOR
  ADMIN
}

enum Language {
  YORUBA
  IGBO
  HAUSA
  EFIK
  TIV
  FULFULDE
  KANURI
  IBIBIO
  EDO
  IJAW
  PIDGIN
  SWAHILI
  AMHARIC
  WOLOF
  AKAN
  ZULU
  XHOSA
  AFRIKAANS
  SOMALI
  OROMO
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuizType {
  MCQ
  TRUE_FALSE
  DRAG_DROP
  AUDIO_MATCH
  VOICE_MATCH
  FILL_IN_BLANK
}
