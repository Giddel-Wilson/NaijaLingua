generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  passwordHash String
  role         Role          @default(STUDENT)
  bio          String?
  profileImage String?
  suspended    Boolean       @default(false)
  banned       Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  certificates Certificate[]
  courses      Course[]
  enrollments  Enrollment[]

  @@map("users")
}

model Course {
  id           String        @id @default(cuid())
  title        String
  description  String?
  language     Language
  level        Level
  imageUrl     String?
  price        Float         @default(0)
  currency     String        @default("USD")
  category     String?
  tags         String        @default("")  // JSON string for SQLite compatibility
  isPublished  Boolean       @default(false)
  isApproved   Boolean       @default(false)
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  certificates Certificate[]
  createdBy    User          @relation(fields: [createdById], references: [id])
  enrollments  Enrollment[]
  lessons      Lesson[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  contentHtml String?
  videoUrl    String?
  audioUrl    String?
  imageUrl    String?
  duration    Int?     // duration in minutes
  order       Int
  isPublished Boolean  @default(false)
  contentSource String? // MAVEN, IGBO_API, LANFRICA, COMMONVOICE
  vocabulary  Json?    // African language vocabulary from APIs
  culturalNotes String? // Cultural context for the lesson
  audioData   Json?    // CommonVoice audio clips
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizzes     Quiz[]
  progress    LessonProgress[]

  @@map("lessons")
}

model LessonProgress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  completed  Boolean  @default(false)
  timeSpent  Int      @default(0) // in minutes
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lesson     Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Quiz {
  id            String   @id @default(cuid())
  lessonId      String
  type          QuizType
  question      String
  options       Json
  correctAnswer String
  explanation   String?
  points        Int      @default(10)
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lesson        Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  attempts      QuizAttempt[]

  @@map("quizzes")
}

model QuizAttempt {
  id         String   @id @default(cuid())
  userId     String
  quizId     String
  answer     String
  isCorrect  Boolean
  score      Int      @default(0)
  attemptedAt DateTime @default(now())
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Enrollment {
  userId       String
  courseId     String
  progress     Float    @default(0)
  score        Float?
  totalScore   Float?   @default(0)
  lessonsCompleted Int  @default(0)
  quizzesCompleted Int  @default(0)
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?
  startedAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  course       Course   @relation(fields: [courseId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@id([userId, courseId])
  @@map("enrollments")
}

model Certificate {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  score      Float
  dateIssued DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("certificates")
}

model Vocabulary {
  id          String   @id @default(cuid())
  language    Language
  word        String
  translation String
  pronunciation String?
  audioUrl    String?
  example     String?
  exampleTranslation String?
  category    String?
  source      String   // MAVEN, IGBO_API, LANFRICA
  sourceData  Json?    // Original API response data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([language, word])
  @@map("vocabulary")
}

model CulturalContent {
  id          String   @id @default(cuid())
  language    Language
  topic       String
  title       String
  content     String
  imageUrl    String?
  videoUrl    String?
  source      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cultural_content")
}

enum Role {
  STUDENT
  INSTRUCTOR
  TUTOR
  ADMIN
}

enum Language {
  YORUBA
  IGBO
  HAUSA
  EFIK
  TIV
  FULFULDE
  KANURI
  IBIBIO
  EDO
  IJAW
  PIDGIN
  SWAHILI
  AMHARIC
  WOLOF
  AKAN
  ZULU
  XHOSA
  AFRIKAANS
  SOMALI
  OROMO
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuizType {
  MCQ
  TRUE_FALSE
  DRAG_DROP
  AUDIO_MATCH
  VOICE_MATCH
  FILL_IN_BLANK
}
