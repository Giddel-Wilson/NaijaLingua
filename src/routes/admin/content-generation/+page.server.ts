import { db } from '$lib/db';
import type { PageServerLoad, Actions } from './$types';
import { fail, redirect } from '@sveltejs/kit';
import { enhancedContentGenerator } from '$lib/content-generation';

export const load: PageServerLoad = async ({ locals }) => {
  if (!locals.user || locals.user.role !== 'ADMIN') {
    throw redirect(302, '/auth/login');
  }

  try {
    // Get supported languages and content topics for the form
    const supportedLanguages = [
      { code: 'igbo', name: 'Igbo', flag: 'üá≥üá¨' },
      { code: 'yoruba', name: 'Yoruba', flag: 'üá≥üá¨' },
      { code: 'hausa', name: 'Hausa', flag: 'üá≥üá¨' },
      { code: 'efik', name: 'Efik', flag: 'üá≥üá¨' },
      { code: 'tiv', name: 'Tiv', flag: 'üá≥üá¨' },
      { code: 'fulfulde', name: 'Fulfulde', flag: 'üá≥üá¨' },
      { code: 'kanuri', name: 'Kanuri', flag: 'üá≥üá¨' },
      { code: 'ibibio', name: 'Ibibio', flag: 'üá≥üá¨' },
      { code: 'edo', name: 'Edo', flag: 'üá≥üá¨' },
      { code: 'ijaw', name: 'Ijaw', flag: 'üá≥üá¨' }
    ];

    const contentTopics = [
      'greetings',
      'family',
      'food_and_eating',
      'numbers',
      'colors',
      'travel',
      'business'
    ];

    // Get content generation statistics
    const [
      totalCourses,
      autoGeneratedCourses,
      totalLessons,
      recentGeneratedContent
    ] = await Promise.all([
      // Total courses
      db.course.count(),
      
      // Auto-generated courses (courses with 'auto-generated' tag)
      db.course.count({
        where: {
          tags: {
            contains: 'auto-generated'
          }
        }
      }),
      
      // Total lessons
      db.lesson.count(),
      
      // Recent generated content
      db.course.findMany({
        where: {
          tags: {
            contains: 'auto-generated'
          }
        },
        take: 10,
        orderBy: {
          createdAt: 'desc'
        },
        select: {
          id: true,
          title: true,
          language: true,
          level: true,
          createdAt: true,
          createdBy: {
            select: {
              name: true
            }
          }
        }
      })
    ]);

    return {
      supportedLanguages,
      contentTopics,
      stats: {
        totalCourses,
        autoGeneratedCourses,
        totalLessons,
        generationRate: totalCourses > 0 ? Math.round((autoGeneratedCourses / totalCourses) * 100) : 0
      },
      recentGeneratedContent
    };
  } catch (error) {
    console.error('Error loading content generation data:', error);
    return {
      supportedLanguages: [],
      contentTopics: [],
      stats: {
        totalCourses: 0,
        autoGeneratedCourses: 0,
        totalLessons: 0,
        generationRate: 0
      },
      recentGeneratedContent: []
    };
  }
};

export const actions: Actions = {
  createCourse: async ({ request, locals }) => {
    if (!locals.user || locals.user.role !== 'ADMIN') {
      throw redirect(302, '/auth/login');
    }

    try {
      const data = await request.formData();
      const title = data.get('title') as string;
      const description = data.get('description') as string;
      const category = data.get('category') as string;
      const price = parseFloat(data.get('price') as string) || 0;
      const useAIGeneration = data.get('useAIGeneration') === 'true';
      const language = data.get('language') as string;
      const level = data.get('level') as string;
      const contentTopic = data.get('contentTopic') as string;

      if (!title?.trim()) {
        return fail(400, {
          error: 'Course title is required'
        });
      }

      // Convert language code to enum value
      const languageMap: Record<string, string> = {
        'igbo': 'IGBO',
        'yoruba': 'YORUBA',
        'hausa': 'HAUSA',
        'efik': 'EFIK',
        'tiv': 'TIV',
        'fulfulde': 'FULFULDE',
        'kanuri': 'KANURI',
        'ibibio': 'IBIBIO',
        'edo': 'EDO',
        'ijaw': 'IJAW'
      };

      const courseLanguage = languageMap[language] || 'IGBO';
      
      // Build tags
      let tags = category || 'Language Learning';
      if (useAIGeneration) {
        tags += ',auto-generated,ai-generated,' + contentTopic;
      }

      // Create the course
      const newCourse = await db.course.create({
        data: {
          title: title.trim(),
          description: description?.trim() || `Learn ${courseLanguage.toLowerCase()} through ${contentTopic} topics`,
          language: courseLanguage as any,
          level: level as any,
          tags,
          price,
          isPublished: false,
          createdById: locals.user.id
        }
      });

      // If AI generation is enabled, generate lessons
      if (useAIGeneration) {
        try {
          console.log(`Generating content for course ${newCourse.id}: ${language} - ${level} - ${contentTopic}`);
          
          // Call content generation directly
          const result = await enhancedContentGenerator.generateCourseContent(
            language,
            level,
            contentTopic
          );

          // Save lessons to database if generation was successful
          if (result.success && result.lessons && result.lessons.length > 0) {
            console.log(`Generated ${result.lessons.length} lessons, saving to database...`);
            
            // Save lessons to database
            for (const lessonData of result.lessons) {
              // Ensure content is a string
              const contentString = typeof lessonData.content === 'string' 
                ? lessonData.content 
                : JSON.stringify(lessonData.content);
              
              const lesson = await db.lesson.create({
                data: {
                  title: lessonData.title || `Lesson ${lessonData.lessonNumber || 1}`,
                  contentHtml: contentString,
                  order: lessonData.lessonNumber || lessonData.order || 1,
                  courseId: newCourse.id,
                  duration: lessonData.estimatedDuration || lessonData.duration || 15,
                  isPublished: false
                }
              });

              console.log(`‚úÖ Created lesson: ${lesson.title} (ID: ${lesson.id})`);

              // Save vocabulary items to the general vocabulary table
              if (lessonData.vocabulary && lessonData.vocabulary.length > 0) {
                console.log(`üìù Saving ${lessonData.vocabulary.length} vocabulary items`);
                for (const vocabItem of lessonData.vocabulary) {
                  try {
                    await db.vocabulary.create({
                      data: {
                        language: language.toUpperCase() as any,
                        word: vocabItem.word || vocabItem.igbo || 'Unknown',
                        translation: vocabItem.translation || vocabItem.english || 'No translation',
                        pronunciation: vocabItem.pronunciation || '',
                        audioUrl: vocabItem.audioUrl || '',
                        category: contentTopic,
                        source: 'AI_GENERATED'
                      }
                    });
                  } catch (vocabError) {
                    // Skip if vocabulary already exists (unique constraint)
                    console.log(`Skipped duplicate vocabulary: ${vocabItem.word}`);
                  }
                }
                console.log(`‚úÖ Saved vocabulary for lesson: ${lesson.title}`);
              }

              // Save cultural content if it exists
              if (lessonData.culturalContent) {
                try {
                  await db.culturalContent.create({
                    data: {
                      language: language.toUpperCase() as any,
                      topic: contentTopic,
                      title: lessonData.culturalContent.title || `Cultural Notes for ${contentTopic}`,
                      content: lessonData.culturalContent.content,
                      source: 'AI_GENERATED'
                    }
                  });
                } catch (culturalError) {
                  console.log(`Cultural content creation skipped:`, culturalError);
                }
              }

              // Save quiz questions as individual quiz entries if they exist
              if (lessonData.quiz && lessonData.quiz.questions && lessonData.quiz.questions.length > 0) {
                console.log(`üìù Saving ${lessonData.quiz.questions.length} quiz questions for lesson ${lesson.id}`);
                for (let i = 0; i < lessonData.quiz.questions.length; i++) {
                  const quizQuestion = lessonData.quiz.questions[i];
                  await db.quiz.create({
                    data: {
                      lessonId: lesson.id,
                      type: 'MCQ',
                      question: quizQuestion.question || `Question ${i + 1}`,
                      options: quizQuestion.options || [],
                      correctAnswer: quizQuestion.correctAnswer || '',
                      explanation: quizQuestion.explanation || '',
                      order: i + 1,
                      points: 10
                    }
                  });
                }
                console.log(`‚úÖ Saved ${lessonData.quiz.questions.length} quiz questions`);
              }
            }
            
            console.log(`‚úÖ Successfully saved ${result.lessons.length} lessons to database for course ${newCourse.id}`);
          } else {
            console.log('‚ùå Content generation failed or returned no lessons');
          }
        } catch (error) {
          console.error('Error generating AI content:', error);
          // Don't fail the course creation if AI generation fails
        }
      }

      return {
        success: true,
        message: `Course "${newCourse.title}" has been created successfully!`,
        courseId: newCourse.id
      };
    } catch (error) {
      console.error('Error creating course:', error);
      return fail(500, {
        error: 'Failed to create course. Please try again.'
      });
    }
  }
};
